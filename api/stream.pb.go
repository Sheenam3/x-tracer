// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package stream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type HelloRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{1}
}

func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Response struct {
	Res                  string   `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetRes() string {
	if m != nil {
		return m.Res
	}
	return ""
}

type Log struct {
	Pid                  int64    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	ProbeName            string   `protobuf:"bytes,2,opt,name=probeName,proto3" json:"probeName,omitempty"`
	Log                  string   `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
	TimeStamp            string   `protobuf:"bytes,4,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{3}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Log) GetProbeName() string {
	if m != nil {
		return m.ProbeName
	}
	return ""
}

func (m *Log) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

func (m *Log) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "HelloReply")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterType((*Log)(nil), "Log")
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor_bb17ef3f514bfe54) }

var fileDescriptor_bb17ef3f514bfe54 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x6e, 0xc3, 0x20,
	0x10, 0x86, 0xe3, 0xda, 0xaa, 0xed, 0x6b, 0x2a, 0x55, 0x4c, 0x28, 0x8a, 0xd4, 0x8a, 0xa1, 0xb2,
	0x3a, 0x30, 0x24, 0x0f, 0xd1, 0x0e, 0x51, 0x07, 0xfc, 0x04, 0x44, 0x3d, 0xa1, 0x48, 0xe0, 0xa3,
	0x40, 0x86, 0xbc, 0x7d, 0x05, 0x89, 0xeb, 0x6c, 0x1f, 0x77, 0x1f, 0x70, 0xff, 0xc1, 0x3a, 0xa6,
	0x80, 0xda, 0x49, 0x1f, 0x28, 0x91, 0x10, 0xb0, 0xfe, 0x42, 0x6b, 0x49, 0xe1, 0xef, 0x19, 0x63,
	0x62, 0x0c, 0x9a, 0x49, 0x3b, 0xe4, 0xd5, 0x5b, 0x35, 0xf4, 0xaa, 0xb0, 0x78, 0x07, 0xb8, 0x39,
	0xde, 0x5e, 0x18, 0x87, 0xd6, 0x61, 0x8c, 0xda, 0xcc, 0xd2, 0x7c, 0x14, 0x5b, 0xe8, 0x14, 0x46,
	0x4f, 0x53, 0x44, 0xf6, 0x02, 0x75, 0xc0, 0x78, 0x33, 0x32, 0x0a, 0x84, 0xfa, 0x40, 0x26, 0x37,
	0xfc, 0xe9, 0xa7, 0x34, 0x6a, 0x95, 0x91, 0x6d, 0xa1, 0xf7, 0x81, 0x8e, 0xf8, 0x9d, 0xff, 0x7d,
	0x28, 0x17, 0x96, 0x42, 0xf6, 0x2d, 0x19, 0x5e, 0x5f, 0x1f, 0xb2, 0x64, 0xb2, 0x9f, 0x4e, 0x0e,
	0xc7, 0xa4, 0x9d, 0xe7, 0xcd, 0xd5, 0xff, 0x2f, 0xec, 0xf6, 0xd0, 0x7e, 0x06, 0xc4, 0x84, 0x81,
	0x0d, 0xd0, 0x8d, 0xfa, 0x52, 0x46, 0x67, 0xcf, 0xf2, 0x3e, 0xe6, 0xe6, 0x49, 0x2e, 0x89, 0xc4,
	0x6a, 0xf7, 0x01, 0xed, 0x88, 0x53, 0xca, 0xf3, 0xbd, 0x42, 0xa7, 0xe8, 0x9c, 0x30, 0x73, 0x23,
	0x0f, 0x64, 0x36, 0xbd, 0x9c, 0x53, 0x89, 0xd5, 0x50, 0x1d, 0x1f, 0xcb, 0xe2, 0xf6, 0x7f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xa1, 0xbc, 0xb8, 0x40, 0x48, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

// UnimplementedGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (*UnimplementedGreeterServer) SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stream.proto",
}

// SentLogClient is the client API for SentLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SentLogClient interface {
	RouteLog(ctx context.Context, opts ...grpc.CallOption) (SentLog_RouteLogClient, error)
}

type sentLogClient struct {
	cc grpc.ClientConnInterface
}

func NewSentLogClient(cc grpc.ClientConnInterface) SentLogClient {
	return &sentLogClient{cc}
}

func (c *sentLogClient) RouteLog(ctx context.Context, opts ...grpc.CallOption) (SentLog_RouteLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SentLog_serviceDesc.Streams[0], "/SentLog/RouteLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &sentLogRouteLogClient{stream}
	return x, nil
}

type SentLog_RouteLogClient interface {
	Send(*Log) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type sentLogRouteLogClient struct {
	grpc.ClientStream
}

func (x *sentLogRouteLogClient) Send(m *Log) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sentLogRouteLogClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SentLogServer is the server API for SentLog service.
type SentLogServer interface {
	RouteLog(SentLog_RouteLogServer) error
}

// UnimplementedSentLogServer can be embedded to have forward compatible implementations.
type UnimplementedSentLogServer struct {
}

func (*UnimplementedSentLogServer) RouteLog(srv SentLog_RouteLogServer) error {
	return status.Errorf(codes.Unimplemented, "method RouteLog not implemented")
}

func RegisterSentLogServer(s *grpc.Server, srv SentLogServer) {
	s.RegisterService(&_SentLog_serviceDesc, srv)
}

func _SentLog_RouteLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SentLogServer).RouteLog(&sentLogRouteLogServer{stream})
}

type SentLog_RouteLogServer interface {
	SendAndClose(*Response) error
	Recv() (*Log, error)
	grpc.ServerStream
}

type sentLogRouteLogServer struct {
	grpc.ServerStream
}

func (x *sentLogRouteLogServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sentLogRouteLogServer) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SentLog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SentLog",
	HandlerType: (*SentLogServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RouteLog",
			Handler:       _SentLog_RouteLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
